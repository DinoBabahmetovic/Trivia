@model Trivia.ViewModel.QuestionViewModel
@{
    ViewBag.Title = "Play";
    Layout = "~/Views/Shared/_LayoutPartial.cshtml";
}

@section JavaScript
{
    <script type="text/javascript" src="@Url.Content("/Scripts/stopwatch.js")"></script>
    <script type="text/javascript" src="@Url.Content("/Scripts/helper.js")"></script>
}

<div class="container container-outer">

    <button type="button" class="close btn-close" aria-label="Close" onclick="returnToHome()">
        <span aria-hidden="true">&times;</span>
    </button>

    <div class="container container-question" style="margin-bottom: 50px;">

        <h1 class="headline" id="question-text" style="margin-bottom: 100px;"></h1>

        <div class="answer-box float-left answer-box-neutral" id="answer1" onclick="selectAnswer(this.id)"></div>
        <div class="answer-box float-right answer-box-neutral" id="answer2" onclick="selectAnswer(this.id)"></div>

        <div class="new-line-div">
            <div class="answer-box answer-box-neutral btn-next" id="next" onclick="checkAnswer()">Next</div>
        </div>
    </div>

    <div class="container container-outer">
        <center>
            <div class="progress progress-width">
                <div id="progress-id" class="progress-bar progress-bar-striped active progress-bar-width" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                    <span id="progress-display">0</span>%
                </div>
            </div>
        </center>
    </div>
    <p class="stopwatch"><span id="min">0</span> : <span id="sec">00</span> : <span id="msec">000</span></p>
</div>

<script>
    var model, mode, question_count, question_progress, current_progress, questions_limit, clicked_id, next_enabled, extreme_switch;

    //stopwatch
    var timer = null;
    var min_txt = document.getElementById("min");
    var min = Number(min_txt.innerHTML);
    var sec_txt = document.getElementById("sec");
    var sec = Number(sec_txt.innerHTML);
    var msec_txt = document.getElementById("msec");
    var msec = Number(msec_txt.innerHTML);

    //audio
    var audio_correct, audio_incorrect, audio_finish;

    window.onload = function () {
        question_count = 0;
        question_progress = 1;
        current_progress = 0;
        questions_limit = 10;
        clicked_id = "";
        next_enabled = true;
        extreme_switch = 1;
        setModel();
        setQuestionText(0, 1);
        setAnswers(0);
        startStopwatch();
        audio_correct = new Audio("/Audio/correct-answer.mp3");
        audio_incorrect = new Audio("/Audio/incorrect-answer.mp3");
        audio_finish = new Audio("/Audio/congratulations.mp3");
    };

    function checkAnswer() {

        if (clicked_id != "" && next_enabled) {
            next_enabled = false;
            var isRight;
            if (mode == "Standard" && getElement(clicked_id).innerHTML == model[question_count].correct_answer) isRight = true;
            else if (mode == "Reverse" && getElement(clicked_id).innerHTML == model[question_count].incorrect_answer) isRight = true;
            else if (mode == "Extreme" && extreme_switch == 1 && getElement(clicked_id).innerHTML == model[question_count].correct_answer) isRight = true;
            else if (mode == "Extreme" && extreme_switch == 2 && getElement(clicked_id).innerHTML == model[question_count].incorrect_answer) isRight = true;
            else isRight = false;
            extreme_switch = (extreme_switch == 1) ? 2 : 1;

            if (isRight) {

                if (question_progress == questions_limit) {
                    audio_finish.play();
                    getElement(clicked_id).classList.add("answer-correct");
                    stopWatch();
                    sleep(1500).then(() => {
                        var result = Number(min_txt.innerHTML) * 60 * 1000 + Number(sec_txt.innerHTML) * 1000 + Number(msec_txt.innerHTML);
                        window.location.href = "/Quiz/End/" + mode + "/" + result.toString();
                    })
                    current_progress = 100;
                }
                else {
                    playAudio(audio_correct);
                    getElement(clicked_id).classList.add("answer-correct");

                    sleep(750).then(() => {
                        getElement(clicked_id).classList.remove("answer-correct");
                        moveToNextQuestion();
                    })
                    question_progress += 1;
                    current_progress += Math.floor(100 / questions_limit);
                }
            }
            else {
                playAudio(audio_incorrect);
                getElement(clicked_id).classList.add("answer-incorrect");

                sleep(750).then(() => {
                    getElement(clicked_id).classList.remove("answer-incorrect");
                    moveToNextQuestion();
                })
                if (mode == "Reverse" || mode == "Extreme") {
                    question_progress = 1;
                    current_progress = 0;
                    extreme_switch = 1;
                }
            }
            setProgress(current_progress);
            if (question_count == model.length - 1) question_count = 0;
            else question_count += 1;
        }       
    }

    function selectAnswer(answer_id) {
        if (next_enabled) {
            if (clicked_id != "") {
                getElement(clicked_id).classList.remove("answer-box-selected");
                getElement(clicked_id).classList.add("answer-box-neutral");
            }
            clicked_id = answer_id;
            getElement(clicked_id).classList.remove("answer-box-neutral");
            getElement(clicked_id).classList.add("answer-box-selected");
        }   
    }

    function removeSelected() {
        getElement(clicked_id).classList.remove("answer-box-selected");
        getElement(clicked_id).classList.add("answer-box-neutral");
        clicked_id = "";
        next_enabled = true;
    }

    function setQuestionText(index, q_number) {
        var question_text = model[index].question_name;
        if (question_text.length > 90) getElement("question-text").classList.add("question-small");
        else getElement("question-text").classList.remove("question-small");
        getElement("question-text").innerHTML = q_number + ". " + question_text;
        getElement("question-text").setAttribute("number", q_number);
    }

    function setModel() {
        var model_passed = @Html.Raw(Json.Encode(Model));
        model = shuffle(model_passed.Questions);
        mode = model_passed.Mode;
    }

    function setProgress(progress) {
        getElement("progress-id").style.width = progress + "%";
        getElement("progress-display").innerHTML = progress;
    }

    function setAnswers(index) {
        var x = Math.floor((Math.random() * 2));

        if (x == 0) {
            getElement("answer1").innerHTML = model[index].correct_answer;
            getElement("answer2").innerHTML = model[index].incorrect_answer;
        }
        else {
            getElement("answer2").innerHTML = model[index].correct_answer;
            getElement("answer1").innerHTML = model[index].incorrect_answer;
        }
    }

    function moveToNextQuestion() {
        setQuestionText(parseInt(question_count), question_progress);
        setAnswers(parseInt(question_count));
        removeSelected();
    }

</script>

